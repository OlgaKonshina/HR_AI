import openai
import time
import json
from audio_text import text_to_ogg
from audio_text import recognize_audio_whisper
from config import DEEPSEEK_API_KEY
from audio_recording import load_audio


class InterviewBot:
    def __init__(self, api_key, job_description, resume):
        self.client = openai.OpenAI(api_key=DEEPSEEK_API_KEY,
                                    base_url="https://api.deepseek.com/v1")
        self.job_description = job_description
        self.resume = resume
        self.questions = []
        self.answers = []
        self.feedbacks = []
        self.current_question_number = 0

    def generate_question(self, previous_answer=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if previous_answer is None:
            prompt = '–ù–∞—á–Ω–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–∞–¥–∞–π –ø–µ—Ä–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—É.'
        else:
            prompt = f'–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {previous_answer}. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.'

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": f'–¢—ã HR-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –¢–µ–±—è –∑–æ–≤—É—Ç –ë–æ—Ä–∏—Å. –í–∞–∫–∞–Ω—Å–∏—è: {self.job_description}. –†–µ–∑—é–º–µ: {self.resume}. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.'},
                {"role": "user", "content": prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def provide_feedback(self, question, answer):
        """–î–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        feedback_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –í–û–ü–†–û–°: {question}
        –û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: {answer}

        –î–∞–π –∫—Ä–∞—Ç–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
        - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–≤–µ—Ç–∞
        - –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏."},
                {"role": "user", "content": feedback_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def generate_final_assessment(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        assessment_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê: {self.resume}
        –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´:
        {self._format_qa_for_assessment()}

        –°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        2. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ 
        3. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        4. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        5. –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
        6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –Ω–∞–π–º—É (–¥–∞/–Ω–µ—Ç)
        7. –û–±—â–∏–π –±–∞–ª–ª –æ—Ç 1 –¥–æ 10
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã —Å—Ç–∞—Ä—à–∏–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –î–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."},
                {"role": "user", "content": assessment_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def _format_qa_for_assessment(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏"""
        formatted = ""
        for i, (question, answer, feedback) in enumerate(zip(self.questions, self.answers, self.feedbacks), 1):
            formatted += f"{i}. –í: {question}\n   –û: {answer}\n   –§: {feedback}\n\n"
        return formatted

    def conduct_interview(self, num_questions=3):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        print("=== –ù–ê–ß–ê–õ–û –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø ===\n")

        for i in range(num_questions):
            self.current_question_number = i + 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            previous_answer = self.answers[-1] if self.answers else None
            question = self.generate_question(previous_answer)
            self.questions.append(question)

            # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å
            print(f"üîπ –í–æ–ø—Ä–æ—Å {self.current_question_number}/{num_questions}:")
            print(f"{question}\n")
            # –æ–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            text_to_ogg(question)
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            answer = recognize_audio_whisper(load_audio())
            self.answers.append(answer)

            # –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
            print("\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...")
            feedback = self.provide_feedback(question, answer)
            self.feedbacks.append(feedback)

            print(f"üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback}\n")
            print("-" * 60 + "\n")
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏

        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        print("üéØ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ...")
        final_assessment = self.generate_final_assessment()

        print("=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===")
        print(final_assessment)

        self.save_interview()

    def save_interview(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        results = {
            "job_description": self.job_description,
            "resume": self.resume,
            "questions": self.questions,
            "answers": self.answers,
            "feedbacks": self.feedbacks,
            "final_assessment": self.generate_final_assessment()
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        with open("reports/interview_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        with open("reports/interview_results.txt", "w", encoding="utf-8") as f:
            f.write("=== –ü–û–õ–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø ===\n\n")
            f.write(f"–í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}\n")
            f.write(f"–ö–ê–ù–î–ò–î–ê–¢: {self.resume[:200]}...\n\n")

            f.write("=== –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´ ===\n")
            for i, (question, answer, feedback) in enumerate(zip(self.questions, self.answers, self.feedbacks), 1):
                f.write(f"\nüîπ –í–û–ü–†–û–° {i}:\n{question}\n")
                f.write(f"üí¨ –û–¢–í–ï–¢:\n{answer}\n")
                f.write(f"üìù –û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨:\n{feedback}\n")
                f.write("-" * 50 + "\n")

            f.write("\n=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===\n")
            f.write(results["final_assessment"])

        print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:")
        print("   - interview_results.json (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
        print("   - interview_results.txt (—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç)")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
def print_interview_summary(bot):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é"""
    print("\n" + "=" * 60)
    print("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    for i, (question, feedback) in enumerate(zip(bot.questions, bot.feedbacks), 1):
        print(f"{i}. {question[:80]}...")
        print(f"   üí° {feedback[:100]}...\n")


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open('data/job_decription/job_description', "r", encoding="utf-8") as f:
            job_description = f.read()

        with open('data/resume/resume', "r", encoding="utf-8") as f:
            resume = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª—ã 'job_description' –∏–ª–∏ 'resume' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        exit()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = InterviewBot(
        api_key=DEEPSEEK_API_KEY,  # API-–∫–ª—é—á DeepSeek
        job_description=job_description,
        resume=resume
    )

    try:
        bot.conduct_interview(num_questions=2)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        print_interview_summary(bot)

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
