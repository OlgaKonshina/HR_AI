import streamlit as st
import openai
import time
import json
import os
from audio_text import text_to_ogg, recognize_audio_whisper
from audio_recording import load_audio
from config import DEEPSEEK_API_KEY
import tempfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="HR –ë–æ—Ç - –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ",
    page_icon="üé§",
    layout="wide"
)

class InterviewBot:
    def __init__(self, api_key, job_description, resume):
        self.client = openai.OpenAI(api_key=DEEPSEEK_API_KEY,
                                    base_url="https://api.deepseek.com/v1")
        self.job_description = job_description
        self.resume = resume
        self.questions = []
        self.answers = []
        self.feedbacks = []
        self.current_question_number = 0

    def generate_question(self, previous_answer=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if previous_answer is None:
            prompt = '–ù–∞—á–Ω–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–∞–¥–∞–π –ø–µ—Ä–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—É.'
        else:
            prompt = f'–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {previous_answer}. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.'

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": f'–¢—ã HR-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –¢–µ–±—è –∑–æ–≤—É—Ç –õ–µ–≤. –í–∞–∫–∞–Ω—Å–∏—è: {self.job_description}. –†–µ–∑—é–º–µ: {self.resume}. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.–ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'},
                {"role": "user", "content": prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def provide_feedback(self, question, answer):
        """–î–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        feedback_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –í–û–ü–†–û–°: {question}
        –û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: {answer}

        –î–∞–π –∫—Ä–∞—Ç–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
        - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–≤–µ—Ç–∞
        - –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏."},
                {"role": "user", "content": feedback_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def generate_final_assessment(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        assessment_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê: {self.resume}
        –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´:
        {self._format_qa_for_assessment()}

        –°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        2. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ 
        3. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        4. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        5. –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
        6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –Ω–∞–π–º—É (–¥–∞/–Ω–µ—Ç)
        7. –û–±—â–∏–π –±–∞–ª–ª –æ—Ç 1 –¥–æ 10
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã —Å—Ç–∞—Ä—à–∏–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –î–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."},
                {"role": "user", "content": assessment_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def _format_qa_for_assessment(self):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏"""
        formatted = ""
        for i, (question, answer, feedback) in enumerate(zip(self.questions, self.answers, self.feedbacks), 1):
            formatted += f"{i}. –í: {question}\n   –û: {answer}\n   –§: {feedback}\n\n"
        return formatted

    def conduct_interview_step(self, num_questions=3):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–¥–∏–Ω —à–∞–≥ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        if len(self.questions) < num_questions:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            previous_answer = self.answers[-1] if self.answers else None
            question = self.generate_question(previous_answer)
            self.questions.append(question)
            
            # –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            text_to_ogg(question)
            
            return question, False  # False - —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        
        else:
            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            final_assessment = self.generate_final_assessment()
            self.save_interview()
            return final_assessment, True  # True - —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ

    def save_interview(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        results = {
            "job_description": self.job_description,
            "resume": self.resume,
            "questions": self.questions,
            "answers": self.answers,
            "feedbacks": self.feedbacks,
            "final_assessment": self.generate_final_assessment()
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        with open("interview_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)

def main():
    st.title("üé§ HR –ë–æ—Ç - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π")
    st.write("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    os.makedirs("audio/questions", exist_ok=True)
    os.makedirs("audio/answers", exist_ok=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        job_description = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",
            height=200,
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ Python —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –æ—Ç 2 –ª–µ—Ç..."
        )
    
    with col2:
        st.subheader("–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        resume = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
            height=200,
            placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –Ω–∞–≤—ã–∫–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ..."
        )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")
    num_questions = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:", 1, 10, 3)
    recording_duration = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã):", 5, 60, 25)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'bot' not in st.session_state:
        st.session_state.bot = None
    if 'current_question' not in st.session_state:
        st.session_state.current_question = None
    if 'interview_started' not in st.session_state:
        st.session_state.interview_started = False
    if 'interview_completed' not in st.session_state:
        st.session_state.interview_completed = False

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if not st.session_state.interview_started and job_description and resume:
        if st.button("üöÄ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ", type="primary"):
            st.session_state.bot = InterviewBot(DEEPSEEK_API_KEY, job_description, resume)
            st.session_state.interview_started = True
            st.rerun()

    # –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if st.session_state.interview_started and not st.session_state.interview_completed:
        bot = st.session_state.bot
        
        if not st.session_state.current_question:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å..."):
                question, completed = bot.conduct_interview_step(num_questions)
                st.session_state.current_question = question
                st.rerun()
        
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            st.subheader(f"–í–æ–ø—Ä–æ—Å {len(bot.questions)}/{num_questions}")
            st.info(st.session_state.current_question)
            
            # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞
            st.subheader("–í–∞—à –æ—Ç–≤–µ—Ç")
            st.write(f"–ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {recording_duration} —Å–µ–∫—É–Ω–¥")
            
            if st.button("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞", type="secondary"):
                with st.spinner(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç... ({recording_duration} —Å–µ–∫)"):
                    audio_file = load_audio(duration=recording_duration)
                    
                with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ..."):
                    answer = recognize_audio_whisper(audio_file)
                    bot.answers.append(answer)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    st.text_area("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:", answer, height=100)
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç..."):
                        feedback = bot.provide_feedback(
                            st.session_state.current_question, 
                            answer
                        )
                        bot.feedbacks.append(feedback)
                    
                    st.success("‚úÖ –û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    st.subheader("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:")
                    st.write(feedback)
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    if len(bot.questions) < num_questions:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å..."):
                            next_question, completed = bot.conduct_interview_step(num_questions)
                            st.session_state.current_question = next_question
                    else:
                        st.session_state.interview_completed = True
                    
                    st.rerun()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if st.session_state.interview_completed:
        bot = st.session_state.bot
        
        st.success("üéâ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        st.subheader("–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
        final_assessment = bot.generate_final_assessment()
        st.write(final_assessment)
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        bot.save_interview()
        
        with open("interview_results.json", "rb") as f:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (JSON)",
                data=f,
                file_name="interview_results.json",
                mime="application/json"
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    with st.sidebar:
        st.header("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        st.write("""
        1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'
        4. –°–ª—É—à–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        5. –ü–æ–ª—É—á–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        6. –í –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        """)
        
        st.header("üéß –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        st.write("""
        - –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–æ–≤
        - –ö–æ–ª–æ–Ω–∫–∏/–Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        - –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        """)
        
        if st.session_state.interview_started:
            st.header("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
            if st.session_state.bot:
                progress = len(st.session_state.bot.questions) / num_questions
                st.progress(progress)
                st.write(f"–í–æ–ø—Ä–æ—Å {len(st.session_state.bot.questions)} –∏–∑ {num_questions}")

if __name__ == "__main__":
    main()
