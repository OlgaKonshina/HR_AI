import streamlit as st
import openai
import os
import PyPDF2
import docx
from io import BytesIO
import re
import uuid
from datetime import datetime
from audio_text import text_to_ogg, recognize_audio_whisper
from audio_recording import load_audio
from config import DEEPSEEK_API_KEY, SITE_URL, SMTP_SERVER, SMTP_PORT, SMTP_USERNAME, SMTP_PASSWORD, HR_EMAIL_SIGNATURE
import sys
from pathlib import Path
import json
import re
from pathlib import Path
import pandas as pd
import docx
from striprtf.striprtf import rtf_to_text
from transformers import AutoTokenizer, AutoModel
import torch
import torch.nn.functional as F
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from database import init_db, get_session, create_interview_in_db, get_interview_from_db, update_interview_report

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ document_processor
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
try:
    from document_processor import DocumentReader, extract_job_title

    try:
        from document_processor import get_embedding

        print("‚úÖ get_embedding –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        try:
            test_embedding = get_embedding("—Ç–µ—Å—Ç", "cointegrated/rubert-tiny2")
            print("‚úÖ RuBERT-Tiny –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            DOCUMENT_PROCESSOR_AVAILABLE = True
        except Exception as e:
            print(f"‚ö†Ô∏è RuBERT-Tiny –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            try:
                test_embedding = get_embedding("—Ç–µ—Å—Ç", "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
                print("‚úÖ Multilingual –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                DOCUMENT_PROCESSOR_AVAILABLE = True
            except Exception as e2:
                print(f"‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e2}")
                DOCUMENT_PROCESSOR_AVAILABLE = False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ get_embedding: {e}")
        DOCUMENT_PROCESSOR_AVAILABLE = False
except ImportError as e:
    print(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    DOCUMENT_PROCESSOR_AVAILABLE = False

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
try:
    from striprtf.striprtf import rtf_to_text
except ImportError:
    st.error("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ RTF —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: !pip install striprtf")
try:
    import odfpy
    from odf import text, teletype
except ImportError:
    st.error("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ODT —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: !pip install odfpy")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="HR –ë–æ—Ç - AI Recruiter",
    page_icon="üéØ",
    layout="wide"
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if 'db_initialized' not in st.session_state:
    st.session_state.db_engine = init_db()
    st.session_state.db_initialized = True
    if st.session_state.db_engine:
        st.session_state.db_session = get_session(st.session_state.db_engine)
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
if 'job_description' not in st.session_state:
    st.session_state.job_description = ""
if 'hr_email' not in st.session_state:
    st.session_state.hr_email = ""
if 'resumes' not in st.session_state:
    st.session_state.resumes = []
if 'filtered_candidates' not in st.session_state:
    st.session_state.filtered_candidates = []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email –∏–∑ —Ç–µ–∫—Å—Ç–∞
def extract_email_from_text(text):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –∏–∑–≤–ª–µ—á—å email –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ."""
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    match = re.search(email_pattern, text)
    if match:
        return match.group(0)
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
def send_interview_invitation(candidate_email, candidate_name, interview_link, hr_email):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—É."""

    subject = f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ AI Recruiter System"

    html_body = f"""
    <html>
      <head>
        <style>
          body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
          .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
          .header {{ background-color: #ffcc00; padding: 20px; text-align: center; color: #000; }}
          .content {{ padding: 20px; background-color: #f9f9f9; }}
          .button {{ display: inline-block; padding: 12px 24px; background-color: #ffcc00; 
                    color: #000; text-decoration: none; border-radius: 5px; font-weight: bold; }}
          .footer {{ padding: 20px; text-align: center; font-size: 12px; color: #666; }}
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h2>üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</h2>
          </div>
          <div class="content">
            <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>{candidate_name}</strong>!</p>
            <p>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ.</p>
            <p>–ú—ã –±—ã–ª–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω—ã –í–∞—à–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –æ—Ç–±–æ—Ä–∞ ‚Äî <strong>–∏–Ω—Ç–µ—Ä–≤—å—é —Å –Ω–∞—à–∏–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –õ—å–≤–æ–º</strong>.</p>

            <p><strong>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏:</strong></p>
            <ul>
              <li>üéØ <strong>–§–æ—Ä–º–∞—Ç:</strong> –û–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º</li>
              <li>üìÖ <strong>–°—Ä–æ–∫:</strong> –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π</li>
              <li>‚è∞ <strong>–í—Ä–µ–º—è:</strong> –í –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è</li>
              <li>üíª <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –ö–æ–º–ø—å—é—Ç–µ—Ä —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç</li>
              <li>‚è±Ô∏è <strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong>Á∫¶30-40 –º–∏–Ω—É—Ç</li>
            </ul>

            <p style="text-align: center; margin: 30px 0;">
              <a href="{interview_link}" class="button">üé§ –ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ</a>
            </p>

            <p>–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é:<br>
            <code>{interview_link}</code></p>

            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –í–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç.</p>

            <p>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:<br>
            <strong>Email:</strong> <a href="mailto:{hr_email}">{hr_email}</a></p>
          </div>
          <div class="footer">
            <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
            <p>{HR_EMAIL_SIGNATURE}</p>
          </div>
        </div>
      </body>
    </html>
    """

    text_body = f"""
    –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ

    –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {candidate_name}!

    –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ.
    –ú—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ —Å –Ω–∞—à–∏–º AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –õ—å–≤–æ–º.

    –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {interview_link}
    –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∫–æ–º–ø—å—é—Ç–µ—Ä —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.

    –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: {hr_email}

    {HR_EMAIL_SIGNATURE}
    """

    msg = MIMEMultipart("alternative")
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = candidate_email

    msg.attach(MIMEText(text_body, "plain"))
    msg.attach(MIMEText(html_body, "html"))

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.sendmail(SMTP_USERNAME, candidate_email, msg.as_string())
        return True
    except smtplib.SMTPAuthenticationError:
        st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å")
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        return False


class InterviewBot:
    def __init__(self, api_key, job_description, resume):
        self.client = openai.OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com/v1")
        self.job_description = job_description
        self.resume = resume
        self.questions = []
        self.answers = []
        self.feedbacks = []

    def generate_question(self, previous_answer=None):
        if previous_answer is None:
            prompt = '–ù–∞—á–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–∞–¥–∞–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.'
        else:
            prompt = f'–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {previous_answer}. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.'

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": f'–¢—ã HR-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –¢–µ–±—è –∑–æ–≤—É—Ç –õ–µ–≤. –í–∞–∫–∞–Ω—Å–∏—è: {self.job_description}. –†–µ–∑—é–º–µ: {self.resume}. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.–ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'},
                {"role": "user", "content": prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def provide_feedback(self, question, answer):
        feedback_prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –í–û–ü–†–û–°: {question}
        –û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: {answer}

        –î–∞–π –∫—Ä–∞—Ç–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):
        - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–≤–µ—Ç–∞
        - –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –î–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏."},
                {"role": "user", "content": feedback_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def generate_final_report(self, email):
        assessment_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê: {self.resume}
        –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´: {self._format_qa_for_assessment()}

        –°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É:
        - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ 
        - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç
        - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        - –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
        - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –Ω–∞–π–º—É (–¥–∞/–Ω–µ—Ç)
        - –û–±—â–∏–π –±–∞–ª–ª –æ—Ç 1 –¥–æ 10

        –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {email}
        """

        response = self.client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã —Å—Ç–∞—Ä—à–∏–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –î–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."},
                {"role": "user", "content": assessment_prompt},
            ],
            stream=False
        )
        return response.choices[0].message.content

    def _format_qa_for_assessment(self):
        formatted = ""
        for i, (question, answer, feedback) in enumerate(zip(self.questions, self.answers, self.feedbacks), 1):
            formatted += f"{i}. –í: {question}\n   –û: {answer}\n   –§: {feedback}\n\n"
        return formatted

    @staticmethod
    def filter_resumes_with_embeddings(resumes, job_description):
        if not DOCUMENT_PROCESSOR_AVAILABLE:
            st.error("–ú–æ–¥—É–ª—å document_processor –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥.")
            return InterviewBot.filter_resumes_fallback(resumes, job_description)

        filtered = []
        model_path = "cointegrated/rubert-tiny2"

        try:
            job_emb = get_embedding(job_description[:512], model_path)

            for i, resume in enumerate(resumes):
                with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ {i + 1}/{len(resumes)} —Å –ø–æ–º–æ—â—å—é embeddings..."):
                    try:
                        resume_short = resume['text'][:1000]
                        resume_emb = get_embedding(resume_short, model_path)
                        similarity_tensor = torch.nn.functional.cosine_similarity(resume_emb, job_emb)
                        similarity = similarity_tensor.item() * 100

                        analysis_result = {
                            'match_score': round(similarity, 1),
                            'is_suitable': similarity >= 40,
                            'strengths': [f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {similarity:.1f}%"],
                            'weaknesses': [],
                            'reason': f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: {similarity:.1f}%"
                        }

                        if similarity < 40:
                            analysis_result['weaknesses'].append("–ù–∏–∑–∫–æ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")

                        resume['analysis'] = analysis_result

                        if analysis_result['is_suitable']:
                            filtered.append(resume)

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—é–º–µ {resume['name']}: {str(e)}")
                        analysis_result = {
                            'match_score': 50,
                            'is_suitable': True,
                            'strengths': ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞'],
                            'weaknesses': [],
                            'reason': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞'
                        }
                        resume['analysis'] = analysis_result
                        filtered.append(resume)

            return sorted(filtered, key=lambda x: x['analysis']['match_score'], reverse=True)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å embeddings: {str(e)}")
            return InterviewBot.filter_resumes_fallback(resumes, job_description)

    @staticmethod
    def filter_resumes_fallback(resumes, job_description):
        filtered = []
        job_keywords = InterviewBot._extract_keywords(job_description)
        st.write(f"üîë **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:** {', '.join(job_keywords[:10])}")

        for i, resume in enumerate(resumes):
            with st.spinner(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ {i + 1}/{len(resumes)} (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)..."):
                analysis_result = InterviewBot._analyze_resume_fallback(resume['text'], job_description, job_keywords)
                resume['analysis'] = analysis_result

                if analysis_result['is_suitable']:
                    filtered.append(resume)

        return sorted(filtered, key=lambda x: x['analysis']['match_score'], reverse=True)

    @staticmethod
    def _extract_keywords(text):
        stop_words = {'–æ–ø—ã—Ç', '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç—ã', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '–∑–Ω–∞–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏'}
        words = re.findall(r'\b[a-zA-Z–∞-—è–ê-–Ø]{4,}\b', text.lower())
        keywords = [word for word in words if word not in stop_words]
        from collections import Counter
        keyword_counts = Counter(keywords)
        return [word for word, count in keyword_counts.most_common(20)]

    @staticmethod
    def _analyze_resume_fallback(resume_text, job_description, job_keywords=None):
        if job_keywords is None:
            job_keywords = InterviewBot._extract_keywords(job_description)

        resume_lower = resume_text.lower()
        job_lower = job_description.lower()

        score = 0
        found_keywords = []

        for keyword in job_keywords:
            if re.search(rf'\b{re.escape(keyword)}\b', resume_lower):
                score += 3
                found_keywords.append(keyword)

        experience_match = re.search(r'–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.*?(\d+)[^\d]*–ª–µ—Ç', resume_lower)
        if experience_match:
            years = int(experience_match.group(1))
            score += min(years * 2, 10)

        max_score = len(job_keywords) * 3 + 10
        match_score = min(int((score / max_score) * 100), 100) if max_score > 0 else 0

        is_suitable = match_score >= 40

        strengths = []
        weaknesses = []

        if found_keywords:
            strengths.append(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {', '.join(found_keywords[:5])}")

        if match_score < 40:
            weaknesses.append("–ù–∏–∑–∫–∏–π score —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")

        return {
            'match_score': match_score,
            'is_suitable': is_suitable,
            'strengths': strengths,
            'weaknesses': weaknesses,
            'reason': f"Score: {match_score}% - {'–ü–æ–¥—Ö–æ–¥–∏—Ç' if is_suitable else '–ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'}"
        }


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
def extract_text_from_file(file):
    try:
        if DOCUMENT_PROCESSOR_AVAILABLE:
            try:
                import tempfile
                with tempfile.NamedTemporaryFile(delete=False, suffix=file.name) as tmp:
                    tmp.write(file.read())
                    tmp_path = tmp.name
                reader = DocumentReader(tmp_path)
                text = reader.extract_text()
                os.unlink(tmp_path)
                return text
            except Exception as e:
                st.warning(f"DocumentReader –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥.")

        if file.type == "application/pdf":
            pdf_reader = PyPDF2.PdfReader(file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
        elif file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            doc = docx.Document(BytesIO(file.read()))
            text = ""
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            return text
        elif file.type == "text/plain":
            return file.read().decode("utf-8", errors='ignore')
        else:
            try:
                return file.read().decode("utf-8", errors='ignore')
            except:
                return f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file.name}: {str(e)}"


def create_interview_link(candidate_data, job_description, hr_email):
    interview_id = str(uuid.uuid4())[:8]
    interview_link = f"{SITE_URL}/?interview_id={interview_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ session_state
    if st.session_state.get('db_session'):
        success = create_interview_in_db(
            st.session_state.db_session,
            interview_id,
            candidate_data,
            job_description,
            hr_email,
            interview_link
        )
        if not success:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return None

    return interview_link


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
query_params = st.query_params
is_candidate = 'interview_id' in query_params

if is_candidate:
    interview_id = query_params['interview_id'][0]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ session_state
    interview_data = None
    candidate = None
    job_description = None
    hr_email = None

    if st.session_state.get('db_session'):
        interview_db = get_interview_from_db(st.session_state.db_session, interview_id)
        if interview_db:
            interview_data = {
                'candidate': interview_db.candidate_data,
                'job_description': interview_db.job_description,
                'hr_email': interview_db.hr_email,
                'status': interview_db.status,
                'interview_link': interview_db.interview_link
            }
            candidate = interview_db.candidate_data
            job_description = interview_db.job_description
            hr_email = interview_db.hr_email

    if interview_data and interview_data['status'] != 'expired':
        st.title("üé§ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
        st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ–Ω–ª–∞–π–Ω-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!")
        st.info(f"**–í–∞–∫–∞–Ω—Å–∏—è:** {job_description[:100]}...")
        st.info(f"**–ö–æ–Ω—Ç–∞–∫—Ç HR:** {hr_email}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        bot_session_key = f'interview_bot_{interview_id}'
        questions_key = f'questions_{interview_id}'
        answers_key = f'answers_{interview_id}'
        current_question_key = f'current_question_{interview_id}'

        if bot_session_key not in st.session_state:
            st.session_state[bot_session_key] = InterviewBot(
                DEEPSEEK_API_KEY,
                job_description,
                candidate['text']
            )
            st.session_state[current_question_key] = 0
            st.session_state[questions_key] = []
            st.session_state[answers_key] = []

        bot = st.session_state[bot_session_key]
        current_question = st.session_state[current_question_key]
        questions = st.session_state[questions_key]
        answers = st.session_state[answers_key]

        if current_question < 3:
            if current_question >= len(questions):
                previous_answer = answers[-1] if answers else None
                question = bot.generate_question(previous_answer)
                questions.append(question)
                answers.append("")

            st.subheader(f"–í–æ–ø—Ä–æ—Å {current_question + 1}/3")
            st.info(questions[current_question])

            if st.button("üé§ –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç", key=f"record_{interview_id}_{current_question}"):
                with st.spinner("–ó–∞–ø–∏—Å—å... (15 —Å–µ–∫—É–Ω–¥)"):
                    audio_file = load_audio(duration=15)
                    answer = recognize_audio_whisper(audio_file)
                    answers[current_question] = answer
                    feedback = bot.provide_feedback(
                        questions[current_question],
                        answer
                    )
                    bot.feedbacks.append(feedback)
                    st.session_state[current_question_key] += 1
                    st.rerun()

            if answers[current_question]:
                st.write("**–í–∞—à –æ—Ç–≤–µ—Ç:**")
                st.write(answers[current_question])
        else:
            st.success("‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            st.balloons()
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è HR..."):
                final_report = bot.generate_final_report(hr_email)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if st.session_state.get('db_session'):
                    update_interview_report(st.session_state.db_session, interview_id, final_report)

                st.subheader("üìã –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω HR")
                st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email: **{hr_email}**")
                st.write("–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
                del st.session_state[bot_session_key]
                del st.session_state[questions_key]
                del st.session_state[answers_key]
                del st.session_state[current_question_key]

    elif interview_data and interview_data['status'] == 'expired':
        st.error("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–∞ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 7 –¥–Ω–µ–π)")
        st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å HR –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏")
        st.info(f"–ö–æ–Ω—Ç–∞–∫—Ç HR: {hr_email}")

    else:
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
        st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR")

else:
    # üëî –†–ï–ñ–ò–ú HR-–°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê - –≠–¢–ê–ü–´ 1 –∏ 2
    st.title("üéØ AI Recruiter - –ü–∞–Ω–µ–ª—å HR")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    with st.sidebar:
        st.header("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
        st.write("""
        **–í–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–µ–∑—é–º–µ:**
        - üìÑ PDF (.pdf)
        - üìù Word DOCX (.docx)
        - üìù Word DOC (.doc)
        - üìã RTF (.rtf)
        - üìò OpenDocument (.odt)
        - üì± –¢–µ–∫—Å—Ç (.txt)
        - üåê HTML (.html)
        """)

        if not DOCUMENT_PROCESSOR_AVAILABLE:
            st.warning("‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if st.session_state.get('db_engine'):
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        else:
            st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

    tab1, tab2 = st.tabs(["üìÅ –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞", "üë• –≠—Ç–∞–ø 2: –û—Ç–±–æ—Ä"])

    with tab1:
        st.header("üìÅ –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
            job_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:",
                type=["pdf", "docx", "txt", "rtf", "odt"],
                key="job_file"
            )

            if job_file:
                job_text = extract_text_from_file(job_file)
                st.session_state.job_description = job_text
                st.success("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

                if job_text.startswith("–î–ª—è —á—Ç–µ–Ω–∏—è") or job_text.startswith("–û—à–∏–±–∫–∞"):
                    st.warning(job_text)
                else:
                    st.text_area("–ü—Ä–µ–≤—å—é –≤–∞–∫–∞–Ω—Å–∏–∏:", job_text[:500] + "..." if len(job_text) > 500 else job_text,
                                 height=150)

            st.session_state.hr_email = st.text_input("üìß –í–∞—à email –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:")

        with col2:
            st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ")
            uploaded_files = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–æ 100 —Ñ–∞–π–ª–æ–≤):",
                type=["pdf", "docx", "txt", "rtf", "odt"],
                accept_multiple_files=True,
                key="resume_files"
            )

            if uploaded_files:
                if len(uploaded_files) > 100:
                    st.warning("–ú–∞–∫—Å–∏–º—É–º 100 —Ñ–∞–π–ª–æ–≤. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 100.")
                    uploaded_files = uploaded_files[:100]

                st.session_state.resumes = []
                for file in uploaded_files:
                    text = extract_text_from_file(file)
                    st.session_state.resumes.append({
                        'name': file.name,
                        'text': text,
                        'type': file.type,
                        'size': file.size
                    })

                st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} —Ä–µ–∑—é–º–µ")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
                format_stats = {}
                for resume in st.session_state.resumes:
                    fmt = resume['name'].split('.')[-1].upper() if '.' in resume['name'] else 'OTHER'
                    format_stats[fmt] = format_stats.get(fmt, 0) + 1

                st.write("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤:**")
                for fmt, count in format_stats.items():
                    st.write(f"‚Ä¢ {fmt}: {count} —Ñ–∞–π–ª–æ–≤")

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if st.button("üöÄ –ù–∞—á–∞—Ç—å AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é",
                     type="primary") and st.session_state.job_description and st.session_state.hr_email and st.session_state.resumes:
            with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é embeddings..."):
                st.session_state.filtered_candidates = InterviewBot.filter_resumes_with_embeddings(
                    st.session_state.resumes, st.session_state.job_description
                )
            st.success(f"AI –æ—Ç–æ–±—Ä–∞–ª {len(st.session_state.filtered_candidates)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")

    with tab2:
        st.header("üë• –≠—Ç–∞–ø 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI-–æ—Ç–±–æ—Ä–∞")

        if not st.session_state.get('filtered_candidates'):
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ –≠—Ç–∞–ø–µ 1")
        else:
            st.write(f"**–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:** {len(st.session_state.filtered_candidates)}")

            for i, candidate in enumerate(st.session_state.filtered_candidates):
                analysis = candidate.get('analysis', {})

                with st.expander(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {i + 1}: {candidate['name']} (Score: {analysis.get('match_score', 0)}%)"):
                    col1, col2 = st.columns(2)

                    with col1:
                        st.write("**ü§ñ AI –ê–Ω–∞–ª–∏–∑:**")
                        st.write(f"**–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** {analysis.get('match_score', 0)}%")
                        st.write(
                            f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {'‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç' if analysis.get('is_suitable', False) else '‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'}")

                        st.write("**‚úÖ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**")
                        for strength in analysis.get('strengths', []):
                            st.write(f"‚Ä¢ {strength}")

                    with col2:
                        st.write("**‚ùå –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**")
                        for weakness in analysis.get('weaknesses', []):
                            st.write(f"‚Ä¢ {weakness}")

                        st.write("**üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**")
                        st.write(analysis.get('reason', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))

                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                    candidate_text = candidate['text']
                    extracted_email = extract_email_from_text(candidate_text)
                    candidate_name = candidate['name'].split('.')[0]  # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏

                    if extracted_email:
                        email_to_send = st.text_input("Email –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", value=extracted_email, key=f"email_{i}")
                    else:
                        email_to_send = st.text_input("Email –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—é–º–µ):", key=f"email_{i}")

                    if st.button(f"üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", key=f"invite_{i}"):
                        if not email_to_send:
                            st.error("–ü–æ–ª–µ email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                        else:
                            interview_link = create_interview_link(
                                candidate, st.session_state.job_description, st.session_state.hr_email
                            )

                            if interview_link:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ
                                with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ email..."):
                                    email_sent = send_interview_invitation(
                                        email_to_send, candidate_name, interview_link, st.session_state.hr_email
                                    )

                                if email_sent:
                                    st.success("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!")
                                    st.balloons()
                                else:
                                    st.error(
                                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                                    st.info("**–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é):**")
                                    st.code(interview_link, language=None)
                            else:
                                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")

                    st.write("**üìÑ –ü—Ä–µ–≤—å—é —Ä–µ–∑—é–º–µ:**")
                    st.text(candidate['text'][:300] + "..." if len(candidate['text']) > 300 else candidate['text'])
st.write("---")
st.caption("AI Recruiter System v5.0 | Mindshift")