import openai
import time
import json
import os
from audio_text import text_to_ogg
from audio_text import recognize_audio_whisper
from config import DEEPSEEK_API_KEY
from audio_recording import load_audio


class InterviewBot:
    def __init__(self, api_key, job_description, resume, num_questions):
        openai.api_key = api_key
        openai.api_base = "https://api.deepseek.com/v1"

        self.job_description = job_description
        self.resume = resume
        self.questions = []
        self.answers = []
        self.overall_feedback = ""  # —Ñ–∏–¥–±–µ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        self.final_assessment = ""  # –æ—Ç—á—ë—Ç –¥–ª—è HR
        self.current_question_number = 0
        self.num_questions = num_questions

    def generate_question(self, previous_answer=None):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        if previous_answer is None:
            prompt = '–ù–∞—á–Ω–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–∞–¥–∞–π –ø–µ—Ä–≤—ã–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–Ω–¥–∏–¥–∞—Ç—É.'
        else:
            prompt = f'–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {previous_answer}. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.'

        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": f'–¢—ã HR-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä. –¢–µ–±—è –∑–æ–≤—É—Ç –õ–µ–≤. –í–∞–∫–∞–Ω—Å–∏—è: {self.job_description}. '
                            f'–†–µ–∑—é–º–µ: {self.resume}. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏. '
                            f'–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {self.num_questions}.'
                            f'–ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'},
                {"role": "user", "content": prompt},
            ]
        )

        return response.choices[0].message.content

    def generate_overall_feedback(self,last_answer_note=""):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –∫—Ä–∞—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ –≤—Å–µ–º –æ—Ç–≤–µ—Ç–∞–º"""
        feedback_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ–±—â–∏–π —Ñ–∏–¥–±–µ–∫ (5-6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). 
        –ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. –û—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê: {self.resume}
        –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´:
        {self._format_qa_for_assessment()}
        {last_answer_note}
 
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
        1. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è
        2. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        3. –û—Å–Ω–æ–≤–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        4. –ö—Ä–∞—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π
        """

        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –°–æ—Å—Ç–∞–≤—å –æ–±—â–∏–π –∫—Ä–∞—Ç–∫–∏–π —Ñ–∏–¥–±–µ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–Ω—Ç–µ—Ä–≤—å—é."},
                {"role": "user", "content": feedback_prompt},
            ]
        )
        return response.choices[0].message.content

    def generate_final_assessment(self, last_answer_note=""):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è HR"""
        assessment_prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –¥–∞–π –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. 
        –û—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏

        –í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}
        –†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê: {self.resume}
        –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´:
        {self._format_qa_for_assessment()}
        {last_answer_note}

        –°–¥–µ–ª–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        2. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ 
        3. –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        4. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        5. –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è
        6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫ –Ω–∞–π–º—É (–¥–∞/–Ω–µ—Ç)
        7. –û–±—â–∏–π –±–∞–ª–ª –æ—Ç 1 –¥–æ 10
        """

        response = openai.ChatCompletion.create(
            model="deepseek-chat",
            messages=[
                {"role": "system",
                 "content": "–¢—ã —Å—Ç–∞—Ä—à–∏–π HR-–º–µ–Ω–µ–¥–∂–µ—Ä. –î–∞–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è."},
                {"role": "user", "content": assessment_prompt},
            ]
        )
        return response.choices[0].message.content

    def _format_qa_for_assessment(self, last_answer_note=""):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏"""
        formatted = ""
        for i, (question, answer) in enumerate(zip(self.questions, self.answers), 1):
            formatted += f"{i}. –í: {question}\n   –û: {answer}\n\n"
        return formatted

    def conduct_interview(self, num_questions=3):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç 2 –æ—Ç—á—ë—Ç–∞"""
        print("=== –ù–ê–ß–ê–õ–û –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø ===\n")

        for i in range(num_questions):
            self.current_question_number = i + 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
            previous_answer = self.answers[-1] if self.answers else None
            question = self.generate_question(previous_answer)
            self.questions.append(question)

            # –í—ã–≤–æ–¥–∏–º –≤–æ–ø—Ä–æ—Å
            print(f"üîπ –í–æ–ø—Ä–æ—Å {self.current_question_number}/{num_questions}:")
            print(f"{question}\n")

            # –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
            try:
                text_to_ogg(question)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è: {e}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            try:
                audio_file = load_audio()
                answer = recognize_audio_whisper(audio_file)
                self.answers.append(answer)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç"
                self.answers.append(answer)

            print("-" * 60 + "\n")
            time.sleep(2)

        # –§–∏–¥–±–µ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
        print("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π —Ñ–∏–¥–±–µ–∫ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        try:
            self.overall_feedback = self.generate_overall_feedback()
            print("\n=== –§–ò–î–ë–ï–ö –î–õ–Ø –ö–ê–ù–î–ò–î–ê–¢–ê ===")
            print(self.overall_feedback)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–¥–±–µ–∫–∞: {e}")
            self.overall_feedback = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π —Ñ–∏–¥–±–µ–∫"

        # –û—Ü–µ–Ω–∫–∞ –¥–ª—è HR
        print("\nüéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è HR...")
        try:
            self.final_assessment = self.generate_final_assessment()
            print("=== –û–¶–ï–ù–ö–ê –î–õ–Ø HR ===")
            print(self.final_assessment)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏: {e}")
            self.final_assessment = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É"

        self.save_interview()

    def save_interview(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        os.makedirs("reports", exist_ok=True)

        results = {
            "job_description": self.job_description,
            "resume": self.resume,
            "questions": self.questions,
            "answers": self.answers,
            "overall_feedback": self.overall_feedback,
            "final_assessment": self.final_assessment
        }

        try:
            # JSON ‚Äî –æ–±—â–∏–π –∞—Ä—Ö–∏–≤
            with open("reports/interview_results.json", "w", encoding="utf-8") as f:
                json.dump(results, f, ensure_ascii=False, indent=2)

            # TXT –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            with open("reports/candidate_feedback.txt", "w", encoding="utf-8") as f:
                f.write("=== –§–ò–î–ë–ï–ö –î–õ–Ø –ö–ê–ù–î–ò–î–ê–¢–ê ===\n\n")
                f.write(self.overall_feedback)

            # TXT –¥–ª—è HR
            with open("reports/hr_assessment.txt", "w", encoding="utf-8") as f:
                f.write("=== –û–¶–ï–ù–ö–ê –î–õ–Ø HR ===\n\n")
                f.write(f"–í–ê–ö–ê–ù–°–ò–Ø: {self.job_description}\n")
                f.write(f"–ö–ê–ù–î–ò–î–ê–¢: {self.resume[:200]}...\n\n")
                f.write("=== –í–û–ü–†–û–°–´ –ò –û–¢–í–ï–¢–´ ===\n")
                for i, (question, answer) in enumerate(zip(self.questions, self.answers), 1):
                    f.write(f"\nüîπ –í–û–ü–†–û–° {i}:\n{question}\n")
                    f.write(f"üí¨ –û–¢–í–ï–¢:\n{answer}\n")
                    f.write("-" * 50 + "\n")
                f.write("\n=== –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê ===\n")
                f.write(self.final_assessment)

            print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:")
            print("   - reports/candidate_feedback.txt (—Ñ–∏–¥–±–µ–∫ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)")
            print("   - reports/hr_assessment.txt (–æ—Ü–µ–Ω–∫–∞ –¥–ª—è HR)")
            print("   - reports/interview_results.json (–∞—Ä—Ö–∏–≤)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
