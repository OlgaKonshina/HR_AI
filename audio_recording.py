import os
import sounddevice as sd
import soundfile as sf
import numpy as np
import wave
import tempfile


def load_audio(duration: int = 25, folder: str = "audio/answers") -> str:
    os.makedirs(folder, exist_ok=True)

    existing = [f for f in os.listdir(folder) if f.startswith("answer_") and f.endswith(".wav")]
    next_index = len(existing) + 1

    filename = os.path.join(folder, f"answer_{next_index}.wav")

    print(f"üéôÔ∏è –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞: {duration} —Å–µ–∫—É–Ω–¥...")

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        sample_rate = 44100
        audio = sd.rec(int(duration * sample_rate),
                       samplerate=sample_rate,
                       channels=1,
                       dtype='float32')
        sd.wait()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV —Ñ–æ—Ä–º–∞—Ç–µ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        sf.write(filename, audio, sample_rate)
        print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")

        return filename

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dummy_audio = np.zeros(44100 * 2)  # 2 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
        sf.write(filename, dummy_audio, 44100)
        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {filename}")

        return filename


def load_audio(duration: int = 25, folder: str = "audio/answers") -> str:
    print(f"üéôÔ∏è –ó–∞–ø–∏—Å—å {duration} —Å–µ–∫—É–Ω–¥...")

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
            temp_filename = tmp.name

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        sample_rate = 44100
        audio = sd.rec(int(duration * sample_rate),
                       samplerate=sample_rate,
                       channels=1)
        sd.wait()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        sf.write(temp_filename, audio, sample_rate)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ–Ω–µ—á–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(folder, exist_ok=True)
        final_filename = os.path.join(folder, f"answer_{len(os.listdir(folder)) + 1}.wav")
        import shutil
        shutil.copy2(temp_filename, final_filename)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_filename)

        print(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞: {final_filename}")
        return final_filename

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return "audio/answers/fallback.wav"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def list_audio_devices():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        devices = sd.query_devices()
        print("üéß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for i, device in enumerate(devices):
            print(f"{i}: {device['name']} (–≤—Ö–æ–¥–æ–≤: {device['max_input_channels']})")
        return devices
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
def test_recording():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏"""
    print("üîä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...")
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        list_audio_devices()

        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å 3 —Å–µ–∫—É–Ω–¥—ã
        test_file = "test_recording.wav"
        print("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å...")

        sample_rate = 44100
        audio = sd.rec(int(3 * sample_rate),
                       samplerate=sample_rate,
                       channels=1,
                       dtype='float32')
        sd.wait()

        sf.write(test_file, audio, sample_rate)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {test_file}")

        return True
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç failed: {e}")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
    test_recording()
