import streamlit as st
import torch
import time
import os
from app import InterviewBot
from config import DEEPSEEK_API_KEY
from audio_recording import load_audio
from audio_text import recognize_audio_whisper, text_to_ogg
from document_processor import DocumentReader, extract_job_title, get_embedding, _generate_recommendation
from app import InterviewBot, print_interview_summary

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="Interview Bot", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ HR - –±–æ—Ç –õ–µ–≤")

# –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
try:
    from audio_text import load_whisper_model
    load_whisper_model()
except Exception as e:
    st.sidebar.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
st.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
job_file = st.file_uploader("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", type=["pdf", "docx", "rtf", "txt", "csv", "json"])
resume_file = st.file_uploader("–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", type=["pdf", "docx", "rtf", "txt", "csv", "json"])

job_text, resume_text, similarity = None, None, None

if job_file and resume_file:
    job_path = f"uploaded_{job_file.name}"
    resume_path = f"uploaded_{resume_file.name}"
    with open(job_path, "wb") as f:
        f.write(job_file.read())
    with open(resume_path, "wb") as f:
        f.write(resume_file.read())

    job_text = DocumentReader(job_path).extract_text()
    resume_text = DocumentReader(resume_path).extract_text()

    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    job_title = extract_job_title(job_text)
    st.write(f"**–í–∞–∫–∞–Ω—Å–∏—è:** {job_title}")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–Ω–ª–∞–π–Ω
        if os.path.exists("model") and os.path.exists("model/config.json"):
            model_path = "model"
            st.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å RuBERT-Tiny2")
        else:
            model_path = "cointegrated/rubert-tiny2"
            st.info("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–Ω–ª–∞–π–Ω –º–æ–¥–µ–ª—å RuBERT-Tiny2")

        job_emb = get_embedding(job_text, model_path)
        resume_emb = get_embedding(resume_text, model_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
        if job_emb is not None and resume_emb is not None:
            similarity = torch.mm(resume_emb, job_emb.T).item() * 100
            st.write(f"üîó –°—Ö–æ–∂–µ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏: **{similarity:.2f}%**")
            st.info(_generate_recommendation(similarity))
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {e}")
        st.info("‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

# === –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ===
if job_file and resume_file and (similarity is None or similarity == 0):
    st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏")


    # –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    def simple_similarity(text1, text2):
        import re
        from collections import Counter

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤
        words1 = re.findall(r'\b[–∞-—è–ê-–Øa-zA-Z]{4,}\b', text1.lower())
        words2 = re.findall(r'\b[–∞-—è–ê-–Øa-zA-Z]{4,}\b', text2.lower())

        if not words1 or not words2:
            return 50.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        common_words = set(words1) & set(words2)
        similarity_score = len(common_words) / len(set(words1)) *100

        return min(similarity_score, 100)


    similarity = simple_similarity(job_text, resume_text)
    st.write(f"üîó –°—Ö–æ–∂–µ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏: **{similarity:.2f}%**")
    st.info(_generate_recommendation(similarity))

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ ===
if similarity and similarity >= 50:
    st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç! –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.")
    num_questions = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", 3, 15, 5)  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if st.button("üöÄ –°—Ç–∞—Ä—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"):
        try:
            bot = InterviewBot(
                api_key=DEEPSEEK_API_KEY,
                job_description=job_text,
                resume=resume_text
            )
            st.session_state["bot"] = bot
            st.session_state["num_questions"] = num_questions
            st.session_state["dialog_active"] = True
            st.session_state["current_question"] = 0
            st.session_state["chat_log"] = []
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")

if st.session_state.get("dialog_active"):
    bot = st.session_state["bot"]
    current_q = st.session_state["current_question"]

    # üî¥ –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
    if st.button("üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"):
        st.success("‚úÖ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º.")
        try:
            final_assessment = bot.generate_final_assessment()
            st.subheader("–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
            st.write(final_assessment)
            bot.save_interview()

            # üìä –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞
            with st.sidebar.expander("üìä –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"):
                print_interview_summary(bot)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        st.session_state["dialog_active"] = False
        st.stop()

    if current_q < st.session_state["num_questions"]:
        try:
            prev_answer = bot.answers[-1] if bot.answers else None
            question = bot.generate_question(prev_answer)
            bot.questions.append(question)

            st.subheader(f"–í–æ–ø—Ä–æ—Å {current_q + 1}:")
            st.write(question)

            # –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                text_to_ogg(question)
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å: {e}")

            # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞
            st.write("üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ (25 —Å–µ–∫—É–Ω–¥)...")
            try:
                audio_file = load_audio(duration=25)
                answer = recognize_audio_whisper(audio_file)
                bot.answers.append(answer)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ: {e}")
                answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç"
                bot.answers.append(answer)

            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            try:
                feedback = bot.provide_feedback(question, answer)
                bot.feedbacks.append(feedback)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
                feedback = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
                bot.feedbacks.append(feedback)

            st.session_state["chat_log"].append(
                {"question": question, "answer": answer, "feedback": feedback}
            )
            st.session_state["current_question"] += 1

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            time.sleep(2)
            st.rerun()

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            st.session_state["dialog_active"] = False

    else:
        st.success("üéØ –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        try:
            final_assessment = bot.generate_final_assessment()
            st.subheader("–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞")
            st.write(final_assessment)
            bot.save_interview()

            # üìä –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞
            with st.sidebar.expander("üìä –ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"):
                print_interview_summary(bot)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

        st.session_state["dialog_active"] = False

# === –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ ===
if "chat_log" in st.session_state and st.session_state["chat_log"]:
    st.sidebar.header("–ò—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é")
    for i, entry in enumerate(st.session_state["chat_log"], 1):
        st.sidebar.write(f"**–í–æ–ø—Ä–æ—Å {i}:** {entry['question']}")
        st.sidebar.write(f"üí¨ –û—Ç–≤–µ—Ç: {entry['answer']}")
        st.sidebar.write(f"üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {entry['feedback']}")
        st.sidebar.markdown("---")

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ ===
st.sidebar.info("""
**‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
- –ú–æ–¥–µ–ª—å: RuBERT-Tiny2
- –ê—É–¥–∏–æ: Whisper + Yandex SpeechKit
- AI: DeepSeek API
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: PDF, DOCX, RTF, TXT, CSV, JSON
""")
