import streamlit as st
import torch
import time
import os
from config import DEEPSEEK_API_KEY
from audio_recording import load_audio
from audio_text import recognize_audio_whisper, text_to_ogg
from document_processor import DocumentReader, extract_job_title, get_embedding, _generate_recommendation
from app_new_2 import InterviewBot  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="Interview Bot", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ HR - –±–æ—Ç –õ–µ–≤")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
st.header("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
job_file = st.file_uploader("–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏", type=["pdf", "docx", "rtf", "txt", "csv", "json"])
resume_file = st.file_uploader("–†–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", type=["pdf", "docx", "rtf", "txt", "csv", "json"])

job_text, resume_text, similarity = None, None, None

if job_file and resume_file:
    job_path = f"uploaded_{job_file.name}"
    resume_path = f"uploaded_{resume_file.name}"
    with open(job_path, "wb") as f:
        f.write(job_file.read())
    with open(resume_path, "wb") as f:
        f.write(resume_file.read())

    job_text = DocumentReader(job_path).extract_text()
    resume_text = DocumentReader(resume_path).extract_text()

    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    job_title = extract_job_title(job_text)
    st.write(f"**–í–∞–∫–∞–Ω—Å–∏—è:** {job_title}")

    try:
        model_path = "model" if os.path.exists("model/config.json") else "cointegrated/rubert-tiny2"
        job_emb = get_embedding(job_text, model_path)
        resume_emb = get_embedding(resume_text, model_path)
        if job_emb is not None and resume_emb is not None:
            similarity = torch.mm(resume_emb, job_emb.T).item() * 100
            st.write(f"üîó –°—Ö–æ–∂–µ—Å—Ç—å —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏: **{similarity:.2f}%**")
            st.info(_generate_recommendation(similarity))
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ ===
if similarity and similarity >= 85.5:
    st.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç! –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.")
    num_questions = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤", 3, 30, 5)

    if st.button("üöÄ –°—Ç–∞—Ä—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"):
        bot = InterviewBot(
            api_key=DEEPSEEK_API_KEY,
            job_description=job_text,
            resume=resume_text,
            num_questions=num_questions  # –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        )
        st.session_state["bot"] = bot
        st.session_state["num_questions"] = num_questions
        st.session_state["dialog_active"] = True
        st.session_state["current_question"] = 0
        st.session_state["chat_log"] = []
        st.session_state["interview_terminated"] = False
        st.rerun()

if st.session_state.get("dialog_active"):
    bot = st.session_state["bot"]
    current_q = st.session_state["current_question"]

    # === –î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if st.button("üõë –ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"):
        bot.terminated = True
        last_answer_note = "‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∏–Ω—Ç–µ—Ä–≤—å—é. –û–Ω —Å–∞–º –∑–∞–∫–æ–Ω—á–∏–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ."

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤
        bot.overall_feedback = bot.generate_overall_feedback(last_answer_note=last_answer_note)
        bot.final_assessment = bot.generate_final_assessment(last_answer_note=last_answer_note)
        bot.save_interview()

        # –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
        st.subheader("üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è HR")
        st.write(bot.final_assessment)
        st.sidebar.subheader("üìù –§–∏–¥–±–µ–∫ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        st.sidebar.write(bot.overall_feedback)

        # ‚õî –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å—Ä–∞–∑—É
        st.session_state["dialog_active"] = False
        st.stop()

    # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ ===
    if current_q < st.session_state["num_questions"]:
        prev_answer = bot.answers[-1] if bot.answers else None
        question = bot.generate_question(prev_answer)
        if question is None:
            st.session_state["current_question"] = st.session_state["num_questions"]
            st.rerun()

        bot.questions.append(question)

        st.subheader(f"–í–æ–ø—Ä–æ—Å :")
        st.write(question)

        try:
            text_to_ogg(question)
        except:
            pass

        st.write("üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ (25 —Å–µ–∫—É–Ω–¥)...")
        try:
            audio_file = load_audio(duration=25)
            answer = recognize_audio_whisper(audio_file)
            bot.answers.append(answer)
        except:
            answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç"
            bot.answers.append(answer)

        # –ó–∞–≥–ª—É—à–∫–∞ —Ñ–∏–¥–±–µ–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        feedback = "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –±—É–¥–µ—Ç –¥–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é"
        st.session_state["chat_log"].append({"question": question, "answer": answer, "feedback": feedback})
        st.session_state["current_question"] += 1
        time.sleep(1)
        st.rerun()

    else:  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        bot.terminated = False
        candidate_feedback = bot.generate_overall_feedback()
        final_assessment = bot.generate_final_assessment()
        bot.overall_feedback = candidate_feedback
        bot.final_assessment = final_assessment
        bot.save_interview()

        st.subheader("üìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è HR")
        st.write(final_assessment)

        with st.sidebar.expander("üìù –§–∏–¥–±–µ–∫ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", expanded=True):
            st.write(candidate_feedback)

        st.session_state["dialog_active"] = False

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ ===
st.sidebar.info("""
**‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**
- –ú–æ–¥–µ–ª—å: RuBERT-Tiny2
- –ê—É–¥–∏–æ: Whisper + Yandex SpeechKit
- AI: DeepSeek API
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤: PDF, DOCX, RTF, TXT, CSV, JSON
""")
